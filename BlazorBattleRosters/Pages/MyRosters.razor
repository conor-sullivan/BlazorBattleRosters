@page "/myrosters"
@using BlazorBattleRosters.Data.Models
@using BlazorBattleRosters.Data.IServices
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IRostersService RostersServices

<PageTitle>Battle Rosters</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (rosterEntries == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <h1 class="text-center">YOUR BATTLE ROSTERS <button @onclick="() => CreateRoster()" class="btn btn-lg btn-outline-success oi oi-plus"></button></h1>
            <hr />
            <form>
                <div class="row row-cols-1 row-cols-md-3 g-4">
                @foreach (RosterModel roster in rosterEntries)
                {
                    
                    <div class="col-md-4">
                        <div class="card bg-dark">
                            <h5 class="card-header">@roster.Name</h5>
                            <div class="card-body">
                                <p class="card-text">
                                    @roster.LastModified
                                 </p>
                                 <a href="/rosterunits/@roster.Id" class="btn btn-primary">View</a>
                            </div>
                        </div><br />
                    </div>
                }
                </div>
            </form>
        }
    </Authorized>
    <NotAuthorized>
        <h1 class="text-center">Please log in...</h1>
    </NotAuthorized>
</AuthorizeView>



@code {
    List<RosterModel>? rosterEntries;
    RosterModel newRoster = new RosterModel();
    private string oldDbUserId = "afee9e21-2c3c-4fda-97e5-6a573e1dbb70";
    private string? userId;

    /// <summary>
    ///     Get current logged in user's ID.
    /// </summary>
    /// <returns>User Id or empty string.</returns>
    protected async Task<string?> GetUserId()
    {
        AuthenticationState authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (!authenticationState.User.Identity.IsAuthenticated)
            return userId = String.Empty;
        return userId = authenticationState.User.Claims.First().Value;
    }

    /// <summary>
    ///     Run methods on page load.
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await this.GetRosters();
        await this.GetUserId();
    }

    /// <summary>
    ///     Get all rosters from database owned by the logged in user.
    /// </summary>
    /// <returns>IEnumberable list of RosterModel.</returns>
    protected async Task GetRosters()
    {
        rosterEntries = await RostersServices.GetRostersByUserId(oldDbUserId);
    }

    /// <summary>
    ///     Create a new roster and save it to the database.
    /// </summary>
    /// <returns>New List List of RosterModel, including the created roster.</returns>
    protected async Task CreateRoster()
    {
        RosterModel createdRoster = await RostersServices.CreateRoster(newRoster, oldDbUserId);
        this.EditRoster(createdRoster.Id);
        await this.GetRosters();
        this.ClearAll();
    }

    /// <summary>
    ///     Deletes a roster from the database.
    /// </summary>
    /// <param name="rosterId"></param>
    /// <returns>New IEnumberable List of RosterModel, minus the deleted roster.</returns>
    protected async Task DeleteRoster(int rosterId)
    {
        await RostersServices.DeleteRoster(rosterId);
        await this.GetRosters();
    }

    /// <summary>
    ///     Redirects page url to /rosterunits/{Roster.Id}.
    /// </summary>
    /// <param name="rosterId">Roster.Id</param>
    void EditRoster(int rosterId)
    {
        NavigationManager.NavigateTo("rosterunits/" + rosterId);
    }

    /// <summary>
    ///     Clear the form input fields of text.
    /// </summary>
    public void ClearAll()
    {
        newRoster.Name = string.Empty;
    }
}
