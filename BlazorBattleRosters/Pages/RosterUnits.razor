@page "/rosterunits/{rosterId:int}"
@using BlazorBattleRosters.Data.Models
@using BlazorBattleRosters.Data.IServices
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IRostersService RostersServices

<container>    
    <h1 class="text-center">@Roster.Name </h1>
    <hr />
    <button @onclick="() => CreateUnit()" class="btn btn-lg btn-outline-success"><span class="oi oi-plus"></span> New Unit</button>
    
    @if (Roster.Units != null)
    {
        <br />
        <br />
        @foreach (UnitModel unit in Roster.Units)
        {
            <Unit Model="@unit"></Unit>
            <button class="btn btn-primary" @onclick="() => EditUnit(unit)">Edit</button>
        }
    }
    
    <hr />
    <div class="float-end">
        <button @onclick="() => DeleteRoster()" class="btn btn-danger btn-sm">
            <strong><span class="oi oi-trash"></span> Delete </strong>
        </button>
    </div>
</container>

<EditUnitModal @ref="@ModalDialog" Title="Unit Details" Model="UnitToEdit">
    <button class="btn btn-success">Save</button>
</EditUnitModal>



@code {
    [Parameter]
    public int RosterId { get; set; }
    RosterModel Roster = new RosterModel();
    private EditUnitModal? ModalDialog { get; set; }
    public UnitModel UnitToEdit { get; set; } = new UnitModel();

    protected void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    protected void CreateUnit()
    {
        UnitToEdit = new UnitModel();
        ModalDialog.Open();
    }

    private void EditUnit(UnitModel unit)
    {
        UnitToEdit = unit;
        ModalDialog.Open();
    }

    protected async Task DeleteRoster()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await RostersServices.DeleteRoster(RosterId);
            this.GoHome();
        }
        return;

    }

    protected override async Task OnInitializedAsync()
    {
        await this.GetRosterDetails();
    }

    protected async Task GetRosterDetails()
    {
        Roster = await RostersServices.GetRosterById(RosterId);
    }
}
