@using BlazorBattleRosters.Data.Models;


<article class="postcard small dark @Colors[ColorId] w-auto">
	<a class="postcard__img_link" href="#">
		<img class="postcard__img" src="https://alkony.enerla.net/images/miniatures/Games_Workshop-Warhammer_40000_Ed9-Indomitus_set-Primaris_Space_Marines-Captain-1.jpg" alt="Image Title" />
	</a>
	
	<div class="postcard__text">
		<button @onclick="EditUnitButtonClicked" class="btn btn-sm btn-outline-light text-center postcard__title @Colors[ColorId]">@Model.Name</button>
		<div class="postcard__subtitle small text-center">
			
		</div>
		<Stats model="@Model" />
		<br />
		<div>
			@if (Model.Weapons?.Count() > 0)
			{
				<table class="table table-sm text-white">
					<thead>
						<tr>
							<th scope="col">NAME</th>
							<th scope="col">RANGE</th>
							<th scope="col">STRENGTH</th>
							<th scope="col">AP</th>
							<th scope="col">DAMAGE</th>
							<th scope="col">RULES</th>
						</tr>
					</thead>
					<tbody>
						@foreach (WeaponModel weapon in Model.Weapons)
						{
							<tr>
								<td>
									@weapon.Name
								</td>
								<td>
									@weapon.Range
								</td>
								<td>
									@weapon.Strength
								</td>
								<td>
									@weapon.ArmorPiercing
								</td>
								<td>
									@weapon.Damage
								</td>
								<td>
									@if (weapon.Abilities != null)
									{
										@foreach (WeaponAbilityModel ability in weapon.Abilities)
										{
											<p>@ability.Rules</p>
										}
									}
									
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>

		<div class="postcard__preview-txt">
				<ul class="postcard__tagbox">
				@if (Model?.Keywords != null)
					{
					@foreach (KeywordsModel keyword in Model.Keywords)
						{
							<span><span class="badge rounded-pill bg-gradient">@keyword.Name</span>&nbsp;</span>
						}
					}
				</ul>
		</div> 
	</div>
</article>

@code {
	[Parameter]
	public UnitModel? Model { get; set; } = new UnitModel();
	public int ColorId { get; set; } = 0;
	public string[] Colors = { "blue", "green", "red", "yellow" };

	[Parameter]
	public EventCallback onEditUnitButtonClicked { get; set; }

	protected async Task EditUnitButtonClicked()
	{
		await onEditUnitButtonClicked.InvokeAsync();
	}

	public Unit()
	{
		Random rand = new Random();
		// Generate a random index less than the size of the array.
		ColorId = rand.Next(Colors.Length);
	}
}